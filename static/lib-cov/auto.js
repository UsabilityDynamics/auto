/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['auto.js']) {
  _$jscoverage['auto.js'] = [];
  _$jscoverage['auto.js'][12] = 0;
  _$jscoverage['auto.js'][15] = 0;
  _$jscoverage['auto.js'][17] = 0;
  _$jscoverage['auto.js'][18] = 0;
  _$jscoverage['auto.js'][21] = 0;
  _$jscoverage['auto.js'][22] = 0;
  _$jscoverage['auto.js'][25] = 0;
  _$jscoverage['auto.js'][26] = 0;
  _$jscoverage['auto.js'][29] = 0;
  _$jscoverage['auto.js'][30] = 0;
  _$jscoverage['auto.js'][36] = 0;
  _$jscoverage['auto.js'][37] = 0;
  _$jscoverage['auto.js'][40] = 0;
  _$jscoverage['auto.js'][41] = 0;
  _$jscoverage['auto.js'][42] = 0;
  _$jscoverage['auto.js'][43] = 0;
  _$jscoverage['auto.js'][44] = 0;
  _$jscoverage['auto.js'][45] = 0;
  _$jscoverage['auto.js'][46] = 0;
  _$jscoverage['auto.js'][49] = 0;
  _$jscoverage['auto.js'][52] = 0;
  _$jscoverage['auto.js'][53] = 0;
  _$jscoverage['auto.js'][56] = 0;
  _$jscoverage['auto.js'][59] = 0;
  _$jscoverage['auto.js'][60] = 0;
  _$jscoverage['auto.js'][64] = 0;
  _$jscoverage['auto.js'][65] = 0;
  _$jscoverage['auto.js'][68] = 0;
  _$jscoverage['auto.js'][74] = 0;
  _$jscoverage['auto.js'][78] = 0;
  _$jscoverage['auto.js'][81] = 0;
  _$jscoverage['auto.js'][84] = 0;
  _$jscoverage['auto.js'][86] = 0;
  _$jscoverage['auto.js'][88] = 0;
  _$jscoverage['auto.js'][89] = 0;
  _$jscoverage['auto.js'][92] = 0;
  _$jscoverage['auto.js'][93] = 0;
  _$jscoverage['auto.js'][95] = 0;
  _$jscoverage['auto.js'][96] = 0;
  _$jscoverage['auto.js'][99] = 0;
  _$jscoverage['auto.js'][102] = 0;
  _$jscoverage['auto.js'][103] = 0;
  _$jscoverage['auto.js'][106] = 0;
  _$jscoverage['auto.js'][109] = 0;
  _$jscoverage['auto.js'][110] = 0;
  _$jscoverage['auto.js'][116] = 0;
  _$jscoverage['auto.js'][119] = 0;
  _$jscoverage['auto.js'][125] = 0;
  _$jscoverage['auto.js'][128] = 0;
  _$jscoverage['auto.js'][131] = 0;
  _$jscoverage['auto.js'][132] = 0;
  _$jscoverage['auto.js'][136] = 0;
  _$jscoverage['auto.js'][138] = 0;
  _$jscoverage['auto.js'][142] = 0;
  _$jscoverage['auto.js'][145] = 0;
  _$jscoverage['auto.js'][152] = 0;
  _$jscoverage['auto.js'][154] = 0;
  _$jscoverage['auto.js'][155] = 0;
  _$jscoverage['auto.js'][157] = 0;
  _$jscoverage['auto.js'][164] = 0;
  _$jscoverage['auto.js'][172] = 0;
  _$jscoverage['auto.js'][184] = 0;
  _$jscoverage['auto.js'][185] = 0;
  _$jscoverage['auto.js'][201] = 0;
  _$jscoverage['auto.js'][217] = 0;
  _$jscoverage['auto.js'][218] = 0;
  _$jscoverage['auto.js'][225] = 0;
  _$jscoverage['auto.js'][241] = 0;
  _$jscoverage['auto.js'][242] = 0;
  _$jscoverage['auto.js'][245] = 0;
  _$jscoverage['auto.js'][252] = 0;
  _$jscoverage['auto.js'][253] = 0;
  _$jscoverage['auto.js'][259] = 0;
  _$jscoverage['auto.js'][260] = 0;
  _$jscoverage['auto.js'][261] = 0;
}
_$jscoverage['auto.js'][12]++;
function Auto(tasks, callback, settings) {
  _$jscoverage['auto.js'][15]++;
  if (! (this instanceof Auto)) {
    _$jscoverage['auto.js'][17]++;
    if (arguments.length === 0) {
      _$jscoverage['auto.js'][18]++;
      return ({});
    }
    _$jscoverage['auto.js'][21]++;
    if (arguments.length === 1) {
      _$jscoverage['auto.js'][22]++;
      return new Auto(tasks);
    }
    _$jscoverage['auto.js'][25]++;
    if (arguments.length === 2) {
      _$jscoverage['auto.js'][26]++;
      return new Auto(tasks, callback);
    }
    _$jscoverage['auto.js'][29]++;
    if (arguments.length === 3) {
      _$jscoverage['auto.js'][30]++;
      return new Auto(tasks, callback, settings);
    }
  }
  _$jscoverage['auto.js'][36]++;
  var self = this;
  _$jscoverage['auto.js'][37]++;
  var keys = Object.keys(tasks);
  _$jscoverage['auto.js'][40]++;
  this.id = Math.random().toString(36).substring(7);
  _$jscoverage['auto.js'][41]++;
  this.error = null;
  _$jscoverage['auto.js'][42]++;
  this.tasks = tasks;
  _$jscoverage['auto.js'][43]++;
  this.callback = arguments[1] instanceof Function? arguments[1]: (function defaultCallback() {
});
  _$jscoverage['auto.js'][44]++;
  this.settings = Auto.extend({}, Auto.defaults, arguments.length === 3? settings: "function" !== typeof callback? callback: {});
  _$jscoverage['auto.js'][45]++;
  this.response = {};
  _$jscoverage['auto.js'][46]++;
  this.listeners = [];
  _$jscoverage['auto.js'][49]++;
  Auto.emitter.mixin(this);
  _$jscoverage['auto.js'][52]++;
  if (! keys.length) {
    _$jscoverage['auto.js'][53]++;
    return callback(null);
  }
  _$jscoverage['auto.js'][56]++;
  self.addListener((function () {
  _$jscoverage['auto.js'][56]++;
  if (Object.keys(self.response).length === keys.length) {
    _$jscoverage['auto.js'][59]++;
    if (self.callback.name === "Placeholder") {
      _$jscoverage['auto.js'][60]++;
      return;
    }
    _$jscoverage['auto.js'][64]++;
    self.emit("complete", null, self.response);
    _$jscoverage['auto.js'][65]++;
    self.emit("success", self.response);
    _$jscoverage['auto.js'][68]++;
    self.callback(null, self.response);
    _$jscoverage['auto.js'][74]++;
    self.callback = (function Placeholder() {
});
  }
}));
  _$jscoverage['auto.js'][78]++;
  Auto.each(keys, (function (key) {
  _$jscoverage['auto.js'][81]++;
  var task = (tasks[key] instanceof Function)? [tasks[key]]: tasks[key];
  _$jscoverage['auto.js'][84]++;
  var taskCallback = (function taskCallback(error) {
  _$jscoverage['auto.js'][86]++;
  var args = Array.prototype.slice.call(arguments, 1);
  _$jscoverage['auto.js'][88]++;
  if (args.length <= 1) {
    _$jscoverage['auto.js'][89]++;
    args = args[0];
  }
  _$jscoverage['auto.js'][92]++;
  if (error && error instanceof Error) {
    _$jscoverage['auto.js'][93]++;
    var safeResults = {};
    _$jscoverage['auto.js'][95]++;
    Auto.each(Object.keys(self.response), (function (rkey) {
  _$jscoverage['auto.js'][96]++;
  safeResults[rkey] = self.response[rkey];
}));
    _$jscoverage['auto.js'][99]++;
    safeResults[key] = args;
    _$jscoverage['auto.js'][102]++;
    self.emit("error", error, safeResults);
    _$jscoverage['auto.js'][103]++;
    self.emit("complete", error, safeResults);
    _$jscoverage['auto.js'][106]++;
    self.callback(error, safeResults);
    _$jscoverage['auto.js'][109]++;
    callback = (function __fake_callback__() {
  _$jscoverage['auto.js'][110]++;
  self.emit("__fake_callback__");
});
  }
  else {
    _$jscoverage['auto.js'][116]++;
    self.response[key] = args;
    _$jscoverage['auto.js'][119]++;
    Auto.setImmediate(self.stepComplete.bind(self), key, args);
  }
});
  _$jscoverage['auto.js'][125]++;
  var requires = task.slice(0, Math.abs(task.length - 1)) || [];
  _$jscoverage['auto.js'][128]++;
  var ready = (function ready() {
  _$jscoverage['auto.js'][131]++;
  var magic = Auto.reduce(requires, (function (a, x) {
  _$jscoverage['auto.js'][132]++;
  return (a && self.response.hasOwnProperty(x));
}), true) && ! self.response.hasOwnProperty(key);
  _$jscoverage['auto.js'][136]++;
  self.emit("ready", key, magic);
  _$jscoverage['auto.js'][138]++;
  return magic;
});
  _$jscoverage['auto.js'][142]++;
  if (ready()) {
    _$jscoverage['auto.js'][145]++;
    task[task.length - 1].bind({todo: true})(taskCallback, self.response, self);
  }
  else {
    _$jscoverage['auto.js'][152]++;
    var listener = (function listener() {
  _$jscoverage['auto.js'][154]++;
  if (ready()) {
    _$jscoverage['auto.js'][155]++;
    self.removeListener(listener, key);
    _$jscoverage['auto.js'][157]++;
    task[task.length - 1].bind({todo: true})(taskCallback, self.response);
  }
});
    _$jscoverage['auto.js'][164]++;
    self.addListener(listener, key);
  }
}));
}
_$jscoverage['auto.js'][172]++;
Object.defineProperties(Auto.prototype, {removeListener: {value: (function removeListener(fn, k) {
  _$jscoverage['auto.js'][184]++;
  for (var i = 0; i < this.listeners.length; i += 1) {
    _$jscoverage['auto.js'][185]++;
    if (this.listeners[i] === fn) {
      _$jscoverage['auto.js'][185]++;
      this.listeners.splice(i, 1);
      _$jscoverage['auto.js'][185]++;
      return;
    }
}
}), enumerable: false}, addListener: {value: (function addListener(fn, k) {
  _$jscoverage['auto.js'][201]++;
  this.listeners.unshift(fn);
}), enumerable: false}, stepComplete: {value: (function stepComplete(k, args) {
  _$jscoverage['auto.js'][217]++;
  Auto.each(this.listeners.slice(0), (function (fn) {
  _$jscoverage['auto.js'][218]++;
  fn();
}));
})}});
_$jscoverage['auto.js'][225]++;
Object.defineProperties(module.exports = Auto, {defaults: {value: {timeout: 5000}, enumerable: true, writable: true, configurable: false}, emitter: {value: require("object-emitter"), enumerable: false}, setImmediate: {value: (function setImmediate(fn) {
  _$jscoverage['auto.js'][241]++;
  if (process && process.nextTick) {
    _$jscoverage['auto.js'][242]++;
    return process.nextTick(fn);
  }
  _$jscoverage['auto.js'][245]++;
  setTimeout((function () {
  _$jscoverage['auto.js'][245]++;
  fn();
}), 0);
}), enumerable: false}, each: {value: (function each(arr, iterator) {
  _$jscoverage['auto.js'][252]++;
  if (arr.forEach) {
    _$jscoverage['auto.js'][252]++;
    return arr.forEach(iterator);
  }
  _$jscoverage['auto.js'][253]++;
  for (var i = 0; i < arr.length; i += 1) {
    _$jscoverage['auto.js'][253]++;
    iterator(arr[i], i, arr);
}
}), writable: true}, reduce: {value: (function reduce(arr, iterator, memo) {
  _$jscoverage['auto.js'][259]++;
  if (arr.reduce) {
    _$jscoverage['auto.js'][259]++;
    return arr.reduce(iterator, memo);
  }
  _$jscoverage['auto.js'][260]++;
  Auto.each(arr, (function (x, i, a) {
  _$jscoverage['auto.js'][260]++;
  memo = iterator(memo, x, i, a);
}));
  _$jscoverage['auto.js'][261]++;
  return memo;
}), writable: true}, extend: {value: require("extend"), enumerable: false}, active: {value: {}, enumerable: true, writable: true, configurable: false}});
_$jscoverage['auto.js'].source = ["/**"," * Auto Module"," *"," * -"," *"," * @module Auto"," * @constructor"," * @author potanin@UD"," * @date 8/5/13"," * @type {Object}"," */","function Auto( tasks, callback, settings ) {","","  // Ensure always using new instance of Auto","  if( !( this instanceof Auto ) ) {","","    if( arguments.length === 0 ) {","      return {};","    }","","    if( arguments.length === 1 ) {","      return new Auto( tasks );","    }","","    if( arguments.length === 2 ) {","      return new Auto( tasks, callback );","    }","","    if( arguments.length === 3 ) {","      return new Auto( tasks, callback, settings );","    }","","  }","","  // Set private properties","  var self      = this;","  var keys      = Object.keys( tasks );","","  // Set instance properties","  this.id          = Math.random().toString( 36 ).substring( 7 );","  this.error       = null;","  this.tasks       = tasks;","  this.callback    = arguments[1] instanceof Function ? arguments[1] : function defaultCallback() {};","  this.settings    = Auto.extend( {}, Auto.defaults, arguments.length === 3 ? settings : 'function' !== typeof callback ? callback : {} );","  this.response    = {};","  this.listeners   = [];","","  // Extend this with Event Emitter","  Auto.emitter.mixin( this );","","  // Ensure there are tasks","  if( !keys.length ) {","    return callback( null );","  }","","  self.addListener( function() { if( Object.keys( self.response ).length === keys.length ) {","","    // Will fire multiple times if not checked","    if( self.callback.name === 'Placeholder' ) {","      return;","    }","","    // All steps in task are complete","    self.emit( 'complete', null, self.response );","    self.emit( 'success', self.response );","","    // Call the primary callback","    self.callback( null, self.response );","","    // Clear out objects","    // self._events = null;","","    // Unset Callback","    self.callback = function Placeholder() {};","","  }});","","  Auto.each( keys, function ( key ) {","","    // Get Task Object","    var task = ( tasks[key] instanceof Function ) ? [tasks[key]]: tasks[key];","","    // Step is Complete","    var taskCallback = function taskCallback( error ) {","      // Get response arguments","      var args = Array.prototype.slice.call( arguments, 1) ;","","      if (args.length &lt;= 1) {","        args = args[0];","      }","","      if( error &amp;&amp; error instanceof Error ) {","        var safeResults = {};","","        Auto.each( Object.keys( self.response ), function( rkey ) {","          safeResults[rkey] = self.response[rkey];","        });","","        safeResults[key] = args;","","        // Emit task evnet and complete event","        self.emit( 'error', error, safeResults );","        self.emit( 'complete', error, safeResults );","","        // Trigger callback","        self.callback( error, safeResults );","","        // stop subsequent errors hitting callback multiple times","        callback = function __fake_callback__() {","          self.emit( '__fake_callback__' );","        };","","      } else {","","        // Save task response to general response","        self.response[key] = args;","","        // process.nextTick( )","        Auto.setImmediate( self.stepComplete.bind( self ), key, args );","","      }","","    };","","    var requires = task.slice( 0, Math.abs( task.length - 1 )) || [];","","    // Ready to Process a Step","    var ready = function ready() {","","      // Identify Dependacncies with some form of magic","      var magic = Auto.reduce( requires, function (a, x) {","        return ( a &amp;&amp; self.response.hasOwnProperty(x));","      }, true ) &amp;&amp; !self.response.hasOwnProperty(key);","","      //","      self.emit( 'ready', key, magic );","","      return magic;","","    };","","    if (ready()) {","      // Trigger Method","","      task[ task.length - 1 ].bind({","        todo: true","      })( taskCallback, self.response, self );","","    } else {","","      // Create a listener to be checked later","      var listener = function listener() {","","        if (ready()) {","          self.removeListener( listener, key );","","          task[task.length - 1].bind({","            todo: true","          })( taskCallback, self.response );","","        }","      }","","      self.addListener( listener, key );","","    }","","  });","","}","","Object.defineProperties( Auto.prototype, {","  removeListener: {","    /**","     * Remove Listener from Queue","     *","     * @method removeListener","     * @param fn","     * @param k","     */","    value: function removeListener( fn, k ) {","      // self.emit( 'removeListener', k );","","      for( var i = 0; i &lt; this.listeners.length; i += 1 ) {","        if( this.listeners[i] === fn ) { this.listeners.splice(i, 1); return; }","      }","","    },","    enumerable: false","  },","  addListener: {","    /**","     * Add Listener to Queue","     *","     * @method addListener","     * @param fn","     * @param k","     */","    value: function addListener(fn, k) {","      // self.emit( 'addListener', k );","      this.listeners.unshift( fn );","    },","    enumerable: false","  },","  stepComplete: {","    /**","     * Single Step Complete","     *","     * @method stepComplete","     * @param k","     * @param args","     */","    value: function stepComplete( k, args ) {","      // self.emit( 'step_complete', k, args );","","      // Get just the methods from each step","      Auto.each( this.listeners.slice(0), function( fn ) {","        fn();","      });","","    }","  }","});","","Object.defineProperties( module.exports = Auto, {","  defaults: {","    value: {","      timeout: 5000","    },","    enumerable: true,","    writable: true,","    configurable: false","  },","  emitter: {","    value: require( 'object-emitter' ),","    enumerable: false","  },","  setImmediate: {","    value: function setImmediate( fn ) {","","      if( process &amp;&amp; process.nextTick ) {","        return process.nextTick( fn );","      }","","      setTimeout( function() { fn() }, 0 )","","    },","    enumerable: false","  },","  each: {","    value: function each(arr, iterator) {","      if (arr.forEach) { return arr.forEach(iterator); }","      for (var i = 0; i &lt; arr.length; i += 1) { iterator(arr[i], i, arr); }","    },","    writable: true","  },","  reduce: {","    value: function reduce(arr, iterator, memo) {","      if (arr.reduce) { return arr.reduce(iterator, memo); }","      Auto.each(arr, function (x, i, a) { memo = iterator(memo, x, i, a); });","      return memo;","    },","    writable: true","  },","  extend: {","    value: require( 'extend' ),","    enumerable: false","  },","  active: {","    value: {},","    enumerable: true,","    writable: true,","    configurable: false","  },","});"];
